name: Integration tests

inputs:
  saveReports:
    description: 'Upload reports for sonar'
    required: false
    default: false
    type: boolean
  dockerHubUsername:
    required: true
    type: string
  dockerHubToken:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerHubUsername }}
        password: ${{ inputs.dockerHubToken }}

    - name: Build infra - neo4j
      shell: bash
      run: docker-compose -f docker-compose.integration-pipeline.yml up -d neo4j

    - name: Build infra - migrate
      shell: bash
      run: docker-compose -f docker-compose.integration-pipeline.yml up -d migrate

    - name: Install Go
      uses: actions/setup-go@v3
      with:
        check-latest: true
        go-version-file: ./go.mod

    - name: Set env vars for integration tests
      shell: bash
      run: |
        echo "RUN_INTEGRATION_TESTS=1" >> "$GITHUB_ENV" && \
        echo "ENVIRONMENT=it-pipeline" >> "$GITHUB_ENV" && \
        echo "SERVICE_NAME=thefoodbook" >> "$GITHUB_ENV" && \
        echo "SERVICE_PORT=3000" >> "$GITHUB_ENV" && \
        echo "LOG_LEVEL=info" >> "$GITHUB_ENV" && \
        echo "LOG_FORMAT=console" >> "$GITHUB_ENV" && \
        echo "DB_URI=neo4j://neo4j:11223344@localhost:7687" >> "$GITHUB_ENV" && \
        echo "DB_USER=neo4j" >> "$GITHUB_ENV" && \
        echo "DB_PASS=11223344" >> "$GITHUB_ENV" && \
        echo "JWT_KEY=my_random_secret_key_for_testing" >> "$GITHUB_ENV"

    - run: mkdir -p ./files
      shell: bash

    #      - name: Integration tests & generate report
    #        run: cd ./test/integrationtests && go test -v "./..." -covermode=count -json >> ../../files/report.json

    - name: Integration tests & generate report
      shell: bash
      run: go test -v "./..." -coverpkg="github.com/Projects-for-Fun/thefoodbook/internal/handlers/webservice" -coverprofile="./files/coverage-it.out" -covermode=count -json > ./files/report-it.json

    - name: Upload coverage.out? => ${{ inputs.saveReports }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-it.out
        path: ./files/coverage-it.out
        if-no-files-found: warn

    - name: Upload report.json? => ${{ inputs.saveReports }}
      uses: actions/upload-artifact@v3
      with:
        name: report-it.json
        path: ./files/report-it.json
        if-no-files-found: warn

    - name: Display structure of files
      shell: bash
      run: ls -R

    - name: Cleanup
      shell: bash
      run: docker-compose -f docker-compose.integration-pipeline.yml down --remove-orphans
